Create Tomcat User
For security purposes, Tomcat should be run as an unprivileged user (i.e. not root). We will create a new user and group that will run the Tomcat service.
First, create a new tomcat group:

	• sudo groupadd tomcat
Then create a new tomcat user. We'll make this user a member of the tomcat group, with a home directory of /opt/tomcat (where we will install Tomcat), and with a shell of /bin/false (so nobody can log into the account):

	• sudo useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat
Now that our tomcat user is set up, let's download and install Tomcat.
Install Tomcat
The easiest way to install Tomcat 8 at this time is to download the latest binary release then configure it manually.
Download Tomcat Binary
Find the latest version of Tomcat 8 at the Tomcat 8 Downloads page. At the time of writing, the latest version is 8.0.23. Under the Binary Distributions section, then under the Core list, copy the link to the "tar.gz".
Let's download the latest binary distribution to our home directory.
First, change to your home directory:

	• cd ~
Then use wget and paste in the link to download the Tomcat 8 archive, like this (your mirror link will probably differ from the example):

	• wget http://mirror.sdunix.com/apache/tomcat/tomcat-8/v8.0.23/bin/apache-tomcat-8.0.23.tar.gz
We're going to install Tomcat to the /opt/tomcat directory. Create the directory, then extract the the archive to it with these commands:

	• sudo mkdir /opt/tomcat
	• sudo tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1
Now we're ready to set up the proper user permissions.
Update Permissions
The tomcat user that we set up needs to have the proper access to the Tomcat installation. We'll set that up now.
Change to the Tomcat installation path:

	• cd /opt/tomcat
Then give the tomcat user write access to the conf directory, and read access to the files in that directory:

	• sudo chgrp -R tomcat conf
	• sudo chmod g+rwx conf
	• sudo chmod g+r conf/*
Then make the tomcat user the owner of the webapps, work, temp, and logs directories:

	• sudo chown -R tomcat webapps/ work/ temp/ logs/
Now that the proper permissions are set up, let's set up a Systemd unit file.
Install Systemd Unit File
Because we want to be able to run Tomcat as a service, we will set up a Tomcat Systemd unit file .
Create and open the unit file by running this command:

	• sudo vi /etc/systemd/system/tomcat.service
Paste in the following script. You may also want to modify the memory allocation settings that are specified in CATALINA_OPTS:
/etc/systemd/system/tomcat.service
# Systemd unit file for tomcat
[Unit]
Description=Apache Tomcat Web Application Container
After=syslog.target network.target
[Service]
Type=forking
Environment=JAVA_HOME=/usr/lib/jvm/jre
Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'
ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/bin/kill -15 $MAINPID
User=tomcat
Group=tomcat
[Install]
WantedBy=multi-user.target
Save and exit. This script tells the server to run the Tomcat service as the tomcat user, with the settings specified.
Now reload Systemd to load the Tomcat unit file:

	• sudo systemctl daemon-reload
Now you can start the Tomcat service with this systemctl command:

	• sudo systemctl start tomcat
If you want to enable the Tomcat service, so it starts on server boot, run this command:

	• sudo systemctl enable tomcat
Tomcat is not completely set up yet, but you can access the default splash page by going to your domain or IP address followed by :8080 in a web browser:

Open in web browser:
http://server_IP_address:8080
You will see the default Tomcat splash page, in addition to other information. Now we will go deeper into the installation of Tomcat.
Configure Tomcat Web Management Interface
In order to use the manager webapp that comes with Tomcat, we must add a login to our Tomcat server. We will do this by editing the tomcat-users.xml file:

	• sudo vi /opt/tomcat/conf/tomcat-users.xml
This file is filled with comments which describe how to configure the file. You may want to delete all the comments between the following two lines, or you may leave them if you want to reference the examples:
tomcat-users.xml excerpt
<tomcat-users>
...
</tomcat-users>
You will want to add a user who can access the manager-gui and admin-gui (webapps that come with Tomcat). You can do so by defining a user similar to the example below. Be sure to change the username and password to something secure:
tomcat-users.xml — Admin User
<tomcat-users>
    <user username="admin" password="password" roles="manager-gui,admin-gui"/>
</tomcat-users>
Save and quit the tomcat-users.xml file. To put our changes into effect, restart the Tomcat service:

	• sudo systemctl restart tomcat
Access the Web Interface
Now that Tomcat is up and running, let's access the web management interface in a web browser. You can do this by accessing the public IP address of the server, on port 8080:

Open in web browser:
http://server_IP_address:8080
You will see something like the following image:

As you can see, there are links to the admin webapps that we configured an admin user for.
Let's take a look at the Manager App, accessible via the link orhttp://server_IP_address:8080/manager/html:

The Web Application Manager is used to manage your Java applications. You can Start, Stop, Reload, Deploy, and Undeploy here. You can also run some diagnostics on your apps (i.e. find memory leaks). Lastly, information about your server is available at the very bottom of this page.
Now let's take a look at the Host Manager, accessible via the link orhttp://server_IP_address:8080/host-manager/html/:

From the Virtual Host Manager page, you can add virtual hosts to serve your applications from.
Conclusion
Your installation of Tomcat is complete! Your are now free to deploy your own Java web applications!
